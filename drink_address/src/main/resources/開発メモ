10/8どおなっちゃってんだよ！
C:\Users\Atsushi\git\DrinkAddress\drink_address>git push heroku master
Counting objects: 108, done.
Delta compression using up to 16 threads.
Compressing objects: 100% (83/83), done.
Writing objects: 100% (108/108), 35.84 MiB | 267.00 KiB/s, done.
Total 108 (delta 35), reused 8 (delta 5)
remote: Compressing source files... done.
remote: Building source:
remote:
remote: -----> Building on the Heroku-22 stack
remote: -----> Using buildpack: heroku/gradle
remote: -----> Gradle app detected
remote: -----> Spring Boot detected
remote: -----> Installing OpenJDK 1.8... done
remote: -----> Building Gradle app...
remote: -----> executing ./gradlew build -x check
remote:        Downloading https://services.gradle.org/distributions/gradle-7.4.1-bin.zip
remote:        ...........10%...........20%...........30%...........40%...........50%...........60%...........70%...........80%...........90%...........100%
remote:        To honour the JVM settings for this build a single-use Daemon process will be forked. See https://docs.gradle.org/7.4.1/userguide/gradle_daemon.html#sec:disabling_the_daemon.
remote:        Daemon will be stopped at the end of the build
remote:        > Task :compileJava NO-SOURCE
remote:        > Task :processResources NO-SOURCE
remote:        > Task :classes UP-TO-DATE
remote:        > Task :bootWarMainClassName
remote:        > Task :bootWar FAILED
remote:
remote:        FAILURE: Build failed with an exception.
remote:
remote:        * What went wrong:
remote:        Execution failed for task ':bootWar'.
remote:        > Error while evaluating property 'mainClass' of task ':bootWar'
remote:           > Failed to calculate the value of task ':bootWar' property 'mainClass'.
remote:              > Main class name has not been configured and it could not be resolved
remote:
remote:        * Try:
remote:        > Run with --stacktrace option to get the stack trace.
remote:        > Run with --info or --debug option to get more log output.
remote:        > Run with --scan to get full insights.
remote:
remote:        * Get more help at https://help.gradle.org
remote:
remote:        BUILD FAILED in 20s
remote:        2 actionable tasks: 2 executed
remote:
remote:  !     ERROR: Failed to run Gradle!
remote:        We're sorry this build is failing. If you can't find the issue in application
remote:        code, please submit a ticket so we can help: https://help.heroku.com
remote:        You can also try reverting to the previous version of the buildpack by running:
remote:        $ heroku buildpacks:set https://github.com/heroku/heroku-buildpack-gradle#previous-version
remote:
remote:        Thanks,
remote:        Heroku
remote:
remote:  !     Push rejected, failed to compile Gradle app.
remote:
remote:  !     Push failed
remote: Verifying deploy...
remote:
remote: !       Push rejected to drinkaddress.
remote:
To https://git.heroku.com/drinkaddress.git
 ! [remote rejected] master -> master (pre-receive hook declined)
error: failed to push some refs to 'https://git.heroku.com/drinkaddress.git'

10/2
今日：現在地を取得、真ん中表示できた
次回：DBをmySQLにする→環境構築からスタート（嫌すぎる）
デプロイ＆スマホから起動させてみる→安価なサーバーを検索
学んだこと：map.panToで地図の中心を滑らかに移動できる
form内に複数ボタンを置きたい場合→片方をtype=buttonにすればsubmitされない

9/29
今日：ドリンクに応じたマップを表示できた
次回：現在地を取得、真ん中にする/見た目をかっこよくする

9/19
次回：ドリンクの種類を選択した際に、それに応じたマップが表示されるようにする
初手：マップをhttp://localhost:8080/selectに埋め込む。

9/11
次回：複数ピンをさす。（現時点でDBにある全データの経度をjsに出力完了）
次回使えそうなurl : https://www.tam-tam.co.jp/tipsnote/javascript/post7755.html
9/7
{
 "geometry":
  {"coordinates":[
  141.349243,
  43.068455
  ],
   "type":"Point"
   },
   
  "type":"Feature",
  
  "properties":
  {"addressCode":"",
   "title":"北海道札幌市北区北六条西四丁目"
   }
 }

9/3
次回：登録してある住所を緯度経度変換、ジオなんたらでできそう？
学んだこと：リダイレクトした上でパラメータを引き継ぐ時は、redirectAttributes.addAttributeを用いる。リダイレクトは再読み込み。

8/28
次回：①削除、②編集、できれば見た目も
学んだこと：one to many 主キーに自動的に紐づけられること。
複数情報を飛ばす際にvalueに複数書いて、コントローラーでsplitで分ける。（推奨できるかは不明）
valueが中身、nameが箱。
jsonのレスポンスが配列で帰ってきた場合、JSONObject[0]で一つ目を抽出できる

8/20
・デフォルトでは(schema.sql,data.sql)->hibernate(@Entity)の順で読み込まれるので、順序を変えたいならspring.jpa.defer-datasource-initialization=trueをapplication.propertiesに追記
・@NoArgsConstructor,@AllArgsConstructorでコンストラクタを自動で作ることができる

8/22
学んだこと：one to many でentityを紐づけた場合、主キーで紐づけられる。
焼きそば

これはコンフリクトです。ですです


8/21
次回：特定のドリンク住所のみを抽出する,gitの使い方を練習する。(川崎)前川にone to manyでなぜ紐づくか聞く。
学んだこと：連携したエンティティの要素をHTMLに表示する場合、{(エンティティ名.フィールド変数名)}の形で表示可能。


8/20
・デフォルトでは(schema.sql,data.sql)->hibernate(@Entity)の順で読み込まれるので、順序を変えたいならspring.jpa.defer-datasource-initialization=trueをapplication.propertiesに追記
・@NoArgsConstructor,@AllArgsConstructorでコンストラクタを自動で作ることができる

8/18
次回Todo：data,schemaに初期値を入力。addressテーブルの全カラムにデータを追加する。


8/15 DrinkEnt型→long型にキャストできない
→初めからDrinkEnt型以外の型としてControllerに送ってみてはどうか
→ここでDto（アプリ内の変数受け渡し専用クラス）を作ってみてはどうか

8/14 githubにpushしようとするとerror403(アクセス権限のエラーが出る)
ー＞github上でアクセス権限の追加で解決。
https://scalapedia.com/articles/148/GitHub%E3%81%AE%E3%83%97%E3%83%A9%E3%82%A4%E3%83%99%E3%83%BC%E3%83%88%E3%83%AA%E3%83%9D%E3%82%B8%E3%83%88%E3%83%AA%E3%81%AB%E3%83%A6%E3%83%BC%E3%82%B6%E3%83%BC%E3%82%92%E6%8B%9B%E5%BE%85%E3%81%99%E3%82%8B#:~:text=%E3%83%AA%E3%83%9D%E3%82%B8%E3%83%88%E3%83%AA%E3%81%AE%E3%82%A2%E3%82%AF%E3%82%BB%E3%82%B9%E6%A8%A9%E8%A8%AD%E5%AE%9A,%E8%A8%AD%E5%AE%9A%E7%94%BB%E9%9D%A2%E3%82%92%E9%96%8B%E3%81%8D%E3%81%BE%E3%81%99%E3%80%82


private DrinkEnt drinkId;　テーブルを結合する際、ManyToOne側のフィールド変数の型は、OneToMany側のEntityのクラス名にする（8/11）

create table drink_list(
 id int not null auto_increment,
 name varchar(255) not null,
 primary key(id)
 );
 
 create table adress_list(
 id int not null auto_increment,
 encount_date timestamp not null,
 drink_id varchar(255) not null ,
 address varchar(255) not null,
 primary key(id)
 );